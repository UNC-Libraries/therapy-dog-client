/* parser generated by jison 0.4.16 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,3],$V1=[1,9],$V2=[1,10],$V3=[1,11],$V4=[1,12],$V5=[1,15],$V6=[2,2],$V7=[2,5],$V8=[5,8],$V9=[2,6],$Va=[2,34],$Vb=[2,7],$Vc=[2,36],$Vd=[2,8],$Ve=[2,9],$Vf=[5,8,34],$Vg=[2,10],$Vh=[2,11],$Vi=[2,12],$Vj=[5,8,22,23,29,31],$Vk=[2,20],$Vl=[1,25],$Vm=[1,26],$Vn=[1,27],$Vo=[1,21],$Vp=[1,18],$Vq=[2,33],$Vr=[1,28],$Vs=[2,35],$Vt=[1,35],$Vu=[1,36],$Vv=[1,37],$Vw=[1,38],$Vx=[5,8,22,23,31],$Vy=[2,23],$Vz=[1,46],$VA=[5,8,13,14,15,16,22,23,29,31,37],$VB=[1,48],$VC=[2,38],$VD=[1,53],$VE=[34,38],$VF=[22,23,29,31,38],$VG=[1,62],$VH=[1,63],$VI=[1,64],$VJ=[1,58],$VK=[1,55],$VL=[1,65],$VM=[2,4],$VN=[2,13],$VO=[2,14],$VP=[5,8,22],$VQ=[2,26],$VR=[2,28],$VS=[1,69],$VT=[2,21],$VU=[2,19],$VV=[2,31],$VW=[5,8,29],$VX=[1,81],$VY=[1,82],$VZ=[1,83],$V_=[1,77],$V$=[1,84],$V01=[2,39],$V11=[22,23,31,38],$V21=[1,92],$V31=[13,14,15,16,22,23,29,31,37,38],$V41=[1,94],$V51=[1,99],$V61=[2,18],$V71=[1,101],$V81=[1,104],$V91=[2,22],$Va1=[1,117],$Vb1=[5,8,13,14,15,16,29,37],$Vc1=[1,119],$Vd1=[2,37],$Ve1=[22,38],$Vf1=[29,38],$Vg1=[1,135],$Vh1=[1,136],$Vi1=[1,137],$Vj1=[1,131],$Vk1=[1,138],$Vl1=[2,15],$Vm1=[1,150],$Vn1=[1,151],$Vo1=[1,152],$Vp1=[1,153],$Vq1=[2,24],$Vr1=[1,157],$Vs1=[2,32],$Vt1=[1,165],$Vu1=[1,179],$Vv1=[13,14,15,16,29,37,38],$Vw1=[1,181],$Vx1=[23,29,31],$Vy1=[1,191],$Vz1=[1,192],$VA1=[1,193],$VB1=[1,187],$VC1=[1,194],$VD1=[8,24],$VE1=[8,24,34],$VF1=[8,22,23,24,29,31],$VG1=[1,204],$VH1=[1,205],$VI1=[1,206],$VJ1=[1,200],$VK1=[1,197],$VL1=[1,207],$VM1=[1,224],$VN1=[23,31],$VO1=[1,235],$VP1=[13,14,15,16,23,29,31,37],$VQ1=[1,237],$VR1=[2,25],$VS1=[8,22,23,24,31],$VT1=[1,245],$VU1=[8,13,14,15,16,22,23,24,29,31,37],$VV1=[1,247],$VW1=[1,252],$VX1=[1,253],$VY1=[2,16],$VZ1=[8,22,24],$V_1=[8,24,29],$V$1=[1,289],$V02=[1,290],$V12=[1,291],$V22=[1,285],$V32=[1,292],$V42=[1,300],$V52=[1,313],$V62=[1,327],$V72=[8,13,14,15,16,24,29,37],$V82=[1,329],$V92=[1,337],$Va2=[1,342],$Vb2=[1,373],$Vc2=[2,17];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"root":3,"program":4,"EOF":5,"expressions":6,"expression":7,"NEWLINE":8,"literal":9,"path":10,"call":11,"arrow":12,"BOOLEAN":13,"STRING":14,"NUMBER":15,"NAME":16,"PATH_SEP":17,"params":18,"hash":19,"block":20,"inverse":21,"ELSE":22,"OPEN_BLOCK":23,"CLOSE_BLOCK":24,"locals":25,"param":26,"pairs":27,"pair":28,"KEY":29,"EQUALS":30,"OPEN_LOCALS":31,"local_names":32,"CLOSE_LOCALS":33,"ARROW":34,"sexprs":35,"sexpr":36,"OPEN_SEXPR":37,"CLOSE_SEXPR":38,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"NEWLINE",13:"BOOLEAN",14:"STRING",15:"NUMBER",16:"NAME",17:"PATH_SEP",22:"ELSE",23:"OPEN_BLOCK",24:"CLOSE_BLOCK",29:"KEY",30:"EQUALS",31:"OPEN_LOCALS",33:"CLOSE_LOCALS",34:"ARROW",37:"OPEN_SEXPR",38:"CLOSE_SEXPR"},
productions_: [0,[3,2],[4,1],[4,0],[6,3],[6,1],[7,1],[7,1],[7,1],[7,1],[9,1],[9,1],[9,1],[10,3],[10,3],[11,5],[21,4],[21,9],[21,0],[18,2],[18,0],[19,1],[27,2],[27,0],[28,3],[20,4],[20,0],[25,3],[25,0],[32,2],[32,1],[12,3],[12,5],[26,1],[26,1],[26,1],[26,1],[35,2],[35,0],[36,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 this.$ = { type: "program", body: $$[$0] }; 
break;
case 3:
 this.$ = { type: "program", body: [] }; 
break;
case 4:
 $$[$0].unshift($$[$0-2]); this.$ = $$[$0]; 
break;
case 5: case 30:
 this.$ = [$$[$0]]; 
break;
case 10:
 this.$ = { type: "boolean", value: $$[$0] === "true" }; 
break;
case 11:
 this.$ = { type: "string", value: $$[$0] }; 
break;
case 12:
 this.$ = { type: "number", value: Number($$[$0]) }; 
break;
case 13:
 $$[$0].parts.unshift($$[$0-2]); this.$ = $$[$0]; 
break;
case 14:
 this.$ = { type: "path", parts: [$$[$0-2], $$[$0]] }; 
break;
case 15:
 this.$ = { type: "call", name: $$[$0-4], params: $$[$0-3], hash: $$[$0-2], locals: $$[$0-1] ? $$[$0-1].locals : [], body: $$[$0-1] ? $$[$0-1].program : null, inverse: $$[$0] }; 
break;
case 16: case 27: case 39:
 this.$ = $$[$0-1]; 
break;
case 17:
 this.$ = { type: "call", name: $$[$0-7], params: $$[$0-6], hash: $$[$0-5], locals: $$[$0-4], body: $$[$0-2], inverse: $$[$0] }; 
break;
case 18: case 26:
 this.$ = null; 
break;
case 19: case 22: case 29: case 37:
 $$[$0].unshift($$[$0-1]); this.$ = $$[$0]; 
break;
case 20: case 23: case 28: case 38:
 this.$ = []; 
break;
case 21:
 this.$ = { type: "hash", pairs: $$[$0] }; 
break;
case 24:
 this.$ = { type: "pair", key: $$[$0-2], value: $$[$0] }; 
break;
case 25:
 this.$ = { locals: $$[$0-3], program: $$[$0-1] }; 
break;
case 31:
 this.$ = { type: "arrow", source: $$[$0-2], target: $$[$0] }; 
break;
case 32:
 this.$ = { type: "arrow", source: $$[$0-4], target: [{ type: "call", name: $$[$0-2], params: $$[$0-1], hash: $$[$0], locals: [], body: null, inverse: null }] }; 
break;
case 33:
 this.$ = { type: "call", name: $$[$0], params: [], hash: { type: "hash", pairs: [] }, locals: [], body: null, inverse: null }; 
break;
}
},
table: [{3:1,4:2,5:$V0,6:3,7:4,9:5,10:6,11:7,12:8,13:$V1,14:$V2,15:$V3,16:$V4,26:13,36:14,37:$V5},{1:[3]},{5:[1,16]},{5:$V6},{5:$V7,8:[1,17]},o($V8,$V9,{34:$Va}),o($V8,$Vb,{34:$Vc}),o($V8,$Vd),o($V8,$Ve),o($Vf,$Vg),o($Vf,$Vh),o($Vf,$Vi),o($Vj,$Vk,{18:19,26:20,9:22,36:23,10:24,13:$Vl,14:$Vm,15:$Vn,16:$Vo,17:$Vp,34:$Vq,37:$Vr}),{34:[1,29]},{34:$Vs},{7:30,9:31,10:32,11:33,12:34,13:$Vt,14:$Vu,15:$Vv,16:$Vw,26:39,36:14,37:$V5},{1:[2,1]},{6:40,7:4,9:5,10:6,11:7,12:8,13:$V1,14:$V2,15:$V3,16:$V4,26:13,36:14,37:$V5},{10:41,16:[1,42]},o($Vx,$Vy,{19:43,27:44,28:45,29:$Vz}),o($Vj,$Vk,{26:20,9:22,36:23,10:24,18:47,13:$Vl,14:$Vm,15:$Vn,16:$Vo,37:$Vr}),o($VA,$Vq,{17:$VB}),o($VA,$Va),o($VA,$Vs),o($VA,$Vc),o($VA,$Vg),o($VA,$Vh),o($VA,$Vi),{7:49,9:31,10:32,11:33,12:34,13:$Vt,14:$Vu,15:$Vv,16:$Vw,26:39,36:14,37:$V5},o($V8,$VC,{35:50,36:52,16:[1,51],37:$VD}),{38:[1,54]},{34:$Va,38:$V9},{34:$Vc,38:$Vb},{38:$Vd},{38:$Ve},o($VE,$Vg),o($VE,$Vh),o($VE,$Vi),o($VF,$Vk,{18:56,26:57,9:59,36:60,10:61,13:$VG,14:$VH,15:$VI,16:$VJ,17:$VK,34:$Vq,37:$VL}),{34:[1,66]},{5:$VM},o($Vf,$VN),o($Vf,$VO,{17:$Vp}),o($VP,$VQ,{20:67,25:68,23:$VR,31:$VS}),o($Vx,$VT),o($Vx,$Vy,{28:45,27:70,29:$Vz}),{30:[1,71]},o($Vj,$VU),{10:72,16:[1,73]},{38:[1,74]},o($V8,$VV),o($VW,$Vk,{18:75,26:76,9:78,36:79,10:80,13:$VX,14:$VY,15:$VZ,16:$V_,37:$V$}),o($V8,$VC,{36:52,35:85,37:$VD}),{7:86,9:31,10:32,11:33,12:34,13:$Vt,14:$Vu,15:$Vv,16:$Vw,26:39,36:14,37:$V5},{34:$V01},{10:87,16:[1,88]},o($V11,$Vy,{19:89,27:90,28:91,29:$V21}),o($VF,$Vk,{26:57,9:59,36:60,10:61,18:93,13:$VG,14:$VH,15:$VI,16:$VJ,37:$VL}),o($V31,$Vq,{17:$V41}),o($V31,$Va),o($V31,$Vs),o($V31,$Vc),o($V31,$Vg),o($V31,$Vh),o($V31,$Vi),{7:95,9:31,10:32,11:33,12:34,13:$Vt,14:$Vu,15:$Vv,16:$Vw,26:39,36:14,37:$V5},{16:[1,97],35:96,36:98,37:$V51,38:$VC},o($V8,$V61,{21:100,22:$V71}),{23:[1,102]},{16:$V81,32:103},o($Vx,$V91),{9:107,10:109,13:[1,110],14:[1,111],15:[1,112],16:[1,106],26:105,36:108,37:[1,113]},o($VA,$VN),o($VA,$VO,{17:$VB}),o($VA,$V01),o($V8,$Vy,{19:114,27:115,28:116,29:$Va1}),o($VW,$Vk,{26:76,9:78,36:79,10:80,18:118,13:$VX,14:$VY,15:$VZ,16:$V_,37:$V$}),o($Vb1,$Vq,{17:$Vc1}),o($Vb1,$Va),o($Vb1,$Vs),o($Vb1,$Vc),o($Vb1,$Vg),o($Vb1,$Vh),o($Vb1,$Vi),{7:120,9:31,10:32,11:33,12:34,13:$Vt,14:$Vu,15:$Vv,16:$Vw,26:39,36:14,37:$V5},o($V8,$Vd1),{38:[1,121]},o($VE,$VN),o($VE,$VO,{17:$VK}),o($Ve1,$VQ,{20:122,25:123,23:$VR,31:$VS}),o($V11,$VT),o($V11,$Vy,{28:91,27:124,29:$V21}),{30:[1,125]},o($VF,$VU),{10:126,16:[1,127]},{38:[1,128]},{38:$VV},o($Vf1,$Vk,{18:129,26:130,9:132,36:133,10:134,13:$Vg1,14:$Vh1,15:$Vi1,16:$Vj1,37:$Vk1}),{35:139,36:98,37:$V51,38:$VC},{7:140,9:31,10:32,11:33,12:34,13:$Vt,14:$Vu,15:$Vv,16:$Vw,26:39,36:14,37:$V5},o($V8,$Vl1),{16:[1,142],23:[1,141]},{4:143,6:144,7:145,9:146,10:147,11:148,12:149,13:$Vm1,14:$Vn1,15:$Vo1,16:$Vp1,24:$V0,26:154,36:14,37:$V5},{33:[1,155]},{16:$V81,32:156,33:[2,30]},o($Vj,$Vq1),o($Vj,$Vq,{17:$Vr1}),o($Vj,$Va),o($Vj,$Vs),o($Vj,$Vc),o($Vj,$Vg),o($Vj,$Vh),o($Vj,$Vi),{7:158,9:31,10:32,11:33,12:34,13:$Vt,14:$Vu,15:$Vv,16:$Vw,26:39,36:14,37:$V5},o($V8,$Vs1),o($V8,$VT),o($V8,$Vy,{28:116,27:159,29:$Va1}),{30:[1,160]},o($VW,$VU),{10:161,16:[1,162]},{38:[1,163]},o([5,8,37],$V01),{21:164,22:$Vt1,38:$V61},{23:[1,166]},o($V11,$V91),{9:169,10:171,13:[1,172],14:[1,173],15:[1,174],16:[1,168],26:167,36:170,37:[1,175]},o($V31,$VN),o($V31,$VO,{17:$V41}),o($V31,$V01),{19:176,27:177,28:178,29:$Vu1,38:$Vy},o($Vf1,$Vk,{26:130,9:132,36:133,10:134,18:180,13:$Vg1,14:$Vh1,15:$Vi1,16:$Vj1,37:$Vk1}),o($Vv1,$Vq,{17:$Vw1}),o($Vv1,$Va),o($Vv1,$Vs),o($Vv1,$Vc),o($Vv1,$Vg),o($Vv1,$Vh),o($Vv1,$Vi),{7:182,9:31,10:32,11:33,12:34,13:$Vt,14:$Vu,15:$Vv,16:$Vw,26:39,36:14,37:$V5},{38:$Vd1},{38:[1,183]},{4:184,6:144,7:145,9:146,10:147,11:148,12:149,13:$Vm1,14:$Vn1,15:$Vo1,16:$Vp1,24:$V0,26:154,36:14,37:$V5},o($Vx1,$Vk,{18:185,26:186,9:188,36:189,10:190,13:$Vy1,14:$Vz1,15:$VA1,16:$VB1,37:$VC1}),{24:[1,195]},{24:$V6},{8:[1,196],24:$V7},o($VD1,$V9,{34:$Va}),o($VD1,$Vb,{34:$Vc}),o($VD1,$Vd),o($VD1,$Ve),o($VE1,$Vg),o($VE1,$Vh),o($VE1,$Vi),o($VF1,$Vk,{18:198,26:199,9:201,36:202,10:203,13:$VG1,14:$VH1,15:$VI1,16:$VJ1,17:$VK1,34:$Vq,37:$VL1}),{34:[1,208]},{23:[2,27]},{33:[2,29]},{10:209,16:[1,210]},{38:[1,211]},o($V8,$V91),{9:214,10:216,13:[1,217],14:[1,218],15:[1,219],16:[1,213],26:212,36:215,37:[1,220]},o($Vb1,$VN),o($Vb1,$VO,{17:$Vc1}),o($Vb1,$V01),{38:$Vl1},{16:[1,222],23:[1,221]},{4:223,6:144,7:145,9:146,10:147,11:148,12:149,13:$Vm1,14:$Vn1,15:$Vo1,16:$Vp1,24:$V0,26:154,36:14,37:$V5},o($VF,$Vq1),o($VF,$Vq,{17:$VM1}),o($VF,$Va),o($VF,$Vs),o($VF,$Vc),o($VF,$Vg),o($VF,$Vh),o($VF,$Vi),{7:225,9:31,10:32,11:33,12:34,13:$Vt,14:$Vu,15:$Vv,16:$Vw,26:39,36:14,37:$V5},{38:$Vs1},{38:$VT},{27:226,28:178,29:$Vu1,38:$Vy},{30:[1,227]},o($Vf1,$VU),{10:228,16:[1,229]},{38:[1,230]},o([37,38],$V01),{24:[1,231]},o($VN1,$Vy,{19:232,27:233,28:234,29:$VO1}),o($Vx1,$Vk,{26:186,9:188,36:189,10:190,18:236,13:$Vy1,14:$Vz1,15:$VA1,16:$VB1,37:$VC1}),o($VP1,$Vq,{17:$VQ1}),o($VP1,$Va),o($VP1,$Vs),o($VP1,$Vc),o($VP1,$Vg),o($VP1,$Vh),o($VP1,$Vi),{7:238,9:31,10:32,11:33,12:34,13:$Vt,14:$Vu,15:$Vv,16:$Vw,26:39,36:14,37:$V5},o($VP,$VR1),{6:239,7:145,9:146,10:147,11:148,12:149,13:$Vm1,14:$Vn1,15:$Vo1,16:$Vp1,26:154,36:14,37:$V5},{10:240,16:[1,241]},o($VS1,$Vy,{19:242,27:243,28:244,29:$VT1}),o($VF1,$Vk,{26:199,9:201,36:202,10:203,18:246,13:$VG1,14:$VH1,15:$VI1,16:$VJ1,37:$VL1}),o($VU1,$Vq,{17:$VV1}),o($VU1,$Va),o($VU1,$Vs),o($VU1,$Vc),o($VU1,$Vg),o($VU1,$Vh),o($VU1,$Vi),{7:248,9:31,10:32,11:33,12:34,13:$Vt,14:$Vu,15:$Vv,16:$Vw,26:39,36:14,37:$V5},o($VD1,$VC,{35:249,36:251,16:[1,250],37:$VW1}),o($Vj,$VN),o($Vj,$VO,{17:$Vr1}),o($Vj,$V01),o($VW,$Vq1),o($VW,$Vq,{17:$VX1}),o($VW,$Va),o($VW,$Vs),o($VW,$Vc),o($VW,$Vg),o($VW,$Vh),o($VW,$Vi),{7:254,9:31,10:32,11:33,12:34,13:$Vt,14:$Vu,15:$Vv,16:$Vw,26:39,36:14,37:$V5},{4:255,6:144,7:145,9:146,10:147,11:148,12:149,13:$Vm1,14:$Vn1,15:$Vo1,16:$Vp1,24:$V0,26:154,36:14,37:$V5},o($Vx1,$Vk,{26:186,9:188,36:189,10:190,18:256,13:$Vy1,14:$Vz1,15:$VA1,16:$VB1,37:$VC1}),{24:[1,257]},{10:258,16:[1,259]},{38:[1,260]},{38:$V91},{9:263,10:265,13:[1,266],14:[1,267],15:[1,268],16:[1,262],26:261,36:264,37:[1,269]},o($Vv1,$VN),o($Vv1,$VO,{17:$Vw1}),o($Vv1,$V01),o($V8,$VY1),{23:$VR,25:270,31:$VS},o($VN1,$VT),o($VN1,$Vy,{28:234,27:271,29:$VO1}),{30:[1,272]},o($Vx1,$VU),{10:273,16:[1,274]},{38:[1,275]},{24:$VM},o($VE1,$VN),o($VE1,$VO,{17:$VK1}),o($VZ1,$VQ,{20:276,25:277,23:$VR,31:$VS}),o($VS1,$VT),o($VS1,$Vy,{28:244,27:278,29:$VT1}),{30:[1,279]},o($VF1,$VU),{10:280,16:[1,281]},{38:[1,282]},o($VD1,$VV),o($V_1,$Vk,{18:283,26:284,9:286,36:287,10:288,13:$V$1,14:$V02,15:$V12,16:$V22,37:$V32}),o($VD1,$VC,{36:251,35:293,37:$VW1}),{7:294,9:31,10:32,11:33,12:34,13:$Vt,14:$Vu,15:$Vv,16:$Vw,26:39,36:14,37:$V5},{10:295,16:[1,296]},{38:[1,297]},{24:[1,298]},o($VN1,$Vy,{27:233,28:234,19:299,29:$VO1}),o($Ve1,$VR1),o($VF,$VN),o($VF,$VO,{17:$VM1}),o($VF,$V01),o($Vf1,$Vq1),o($Vf1,$Vq,{17:$V42}),o($Vf1,$Va),o($Vf1,$Vs),o($Vf1,$Vc),o($Vf1,$Vg),o($Vf1,$Vh),o($Vf1,$Vi),{7:301,9:31,10:32,11:33,12:34,13:$Vt,14:$Vu,15:$Vv,16:$Vw,26:39,36:14,37:$V5},{23:[1,302]},o($VN1,$V91),{9:305,10:307,13:[1,308],14:[1,309],15:[1,310],16:[1,304],26:303,36:306,37:[1,311]},o($VP1,$VN),o($VP1,$VO,{17:$VQ1}),o($VP1,$V01),o($VD1,$V61,{21:312,22:$V52}),{23:[1,314]},o($VS1,$V91),{9:317,10:319,13:[1,320],14:[1,321],15:[1,322],16:[1,316],26:315,36:318,37:[1,323]},o($VU1,$VN),o($VU1,$VO,{17:$VV1}),o($VU1,$V01),o($VD1,$Vy,{19:324,27:325,28:326,29:$V62}),o($V_1,$Vk,{26:284,9:286,36:287,10:288,18:328,13:$V$1,14:$V02,15:$V12,16:$V22,37:$V32}),o($V72,$Vq,{17:$V82}),o($V72,$Va),o($V72,$Vs),o($V72,$Vc),o($V72,$Vg),o($V72,$Vh),o($V72,$Vi),{7:330,9:31,10:32,11:33,12:34,13:$Vt,14:$Vu,15:$Vv,16:$Vw,26:39,36:14,37:$V5},o($VD1,$Vd1),{38:[1,331]},o($VW,$VN),o($VW,$VO,{17:$VX1}),o($VW,$V01),{38:$VY1},{23:$VR,25:332,31:$VS},{10:333,16:[1,334]},{38:[1,335]},{4:336,6:144,7:145,9:146,10:147,11:148,12:149,13:$Vm1,14:$Vn1,15:$Vo1,16:$Vp1,24:$V0,26:154,36:14,37:$V5},o($Vx1,$Vq1),o($Vx1,$Vq,{17:$V92}),o($Vx1,$Va),o($Vx1,$Vs),o($Vx1,$Vc),o($Vx1,$Vg),o($Vx1,$Vh),o($Vx1,$Vi),{7:338,9:31,10:32,11:33,12:34,13:$Vt,14:$Vu,15:$Vv,16:$Vw,26:39,36:14,37:$V5},o($VD1,$Vl1),{16:[1,340],23:[1,339]},{4:341,6:144,7:145,9:146,10:147,11:148,12:149,13:$Vm1,14:$Vn1,15:$Vo1,16:$Vp1,24:$V0,26:154,36:14,37:$V5},o($VF1,$Vq1),o($VF1,$Vq,{17:$Va2}),o($VF1,$Va),o($VF1,$Vs),o($VF1,$Vc),o($VF1,$Vg),o($VF1,$Vh),o($VF1,$Vi),{7:343,9:31,10:32,11:33,12:34,13:$Vt,14:$Vu,15:$Vv,16:$Vw,26:39,36:14,37:$V5},o($VD1,$Vs1),o($VD1,$VT),o($VD1,$Vy,{28:326,27:344,29:$V62}),{30:[1,345]},o($V_1,$VU),{10:346,16:[1,347]},{38:[1,348]},o([8,24,37],$V01),{23:[1,349]},o($Vf1,$VN),o($Vf1,$VO,{17:$V42}),o($Vf1,$V01),{24:[1,350]},{10:351,16:[1,352]},{38:[1,353]},{4:354,6:144,7:145,9:146,10:147,11:148,12:149,13:$Vm1,14:$Vn1,15:$Vo1,16:$Vp1,24:$V0,26:154,36:14,37:$V5},o($Vx1,$Vk,{26:186,9:188,36:189,10:190,18:355,13:$Vy1,14:$Vz1,15:$VA1,16:$VB1,37:$VC1}),{24:[1,356]},{10:357,16:[1,358]},{38:[1,359]},o($VD1,$V91),{9:362,10:364,13:[1,365],14:[1,366],15:[1,367],16:[1,361],26:360,36:363,37:[1,368]},o($V72,$VN),o($V72,$VO,{17:$V82}),o($V72,$V01),{4:369,6:144,7:145,9:146,10:147,11:148,12:149,13:$Vm1,14:$Vn1,15:$Vo1,16:$Vp1,24:$V0,26:154,36:14,37:$V5},o($V8,$V61,{21:370,22:$V71}),o($Vx1,$VN),o($Vx1,$VO,{17:$V92}),o($Vx1,$V01),{24:[1,371]},o($VN1,$Vy,{27:233,28:234,19:372,29:$VO1}),o($VZ1,$VR1),o($VF1,$VN),o($VF1,$VO,{17:$Va2}),o($VF1,$V01),o($V_1,$Vq1),o($V_1,$Vq,{17:$Vb2}),o($V_1,$Va),o($V_1,$Vs),o($V_1,$Vc),o($V_1,$Vg),o($V_1,$Vh),o($V_1,$Vi),{7:374,9:31,10:32,11:33,12:34,13:$Vt,14:$Vu,15:$Vv,16:$Vw,26:39,36:14,37:$V5},{24:[1,375]},o($V8,$Vc2),o($VD1,$VY1),{23:$VR,25:376,31:$VS},{10:377,16:[1,378]},{38:[1,379]},{21:380,22:$Vt1,38:$V61},{23:[1,381]},o($V_1,$VN),o($V_1,$VO,{17:$Vb2}),o($V_1,$V01),{38:$Vc2},{4:382,6:144,7:145,9:146,10:147,11:148,12:149,13:$Vm1,14:$Vn1,15:$Vo1,16:$Vp1,24:$V0,26:154,36:14,37:$V5},{24:[1,383]},o($VD1,$V61,{21:384,22:$V52}),o($VD1,$Vc2)],
defaultActions: {3:[2,2],14:[2,35],16:[2,1],33:[2,8],34:[2,9],40:[2,4],54:[2,39],96:[2,31],139:[2,37],144:[2,2],155:[2,27],156:[2,29],164:[2,15],176:[2,32],177:[2,21],226:[2,22],239:[2,4],298:[2,16],380:[2,17]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = new Error();

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

function strip(start, end) {
  return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng - end);
}


var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: return 37; 
break;
case 1: return 38; 
break;
case 2: return 23; 
break;
case 3: return 24; 
break;
case 4: return 31; 
break;
case 5: return 33; 
break;
case 6: return 8; 
break;
case 7: 
break;
case 8: return 30; 
break;
case 9: return 34; 
break;
case 10: return 17; 
break;
case 11: return 22; 
break;
case 12: return 13; 
break;
case 13: return 13; 
break;
case 14: return 29; 
break;
case 15: return 16; 
break;
case 16: yy_.yytext = strip(1, 2).replace(/\\"/g, '"'); return 14; 
break;
case 17: yy_.yytext = strip(1, 2).replace(/\\'/g, "'"); return 14; 
break;
case 18: return 15; 
break;
case 19: return 5; 
break;
}
},
rules: [/^(?:\()/,/^(?:\))/,/^(?:\n*\{\n*)/,/^(?:\n*\}\n*)/,/^(?:as\s+\|)/,/^(?:\|)/,/^(?:[\n;]+)/,/^(?:[ \t]+)/,/^(?:=)/,/^(?:->)/,/^(?:\.)/,/^(?:else\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:(([@-Z_a-z\xA8\xAA\xAD\xAF\xB2-\xB5\xB7-\xBA\xBC-\xBE\xC0-\xD6\xD8-\xF6\xF8-\u02FF\u0370-\u167F\u1681-\u180D\u180F-\u1DBF\u1E00-\u1FFF\u200B-\u200D\u202A-\u202E\u203F\u2040\u2054\u2060-\u20CF\u2100-\u218F\u2460-\u24FF\u2776-\u2793\u2C00-\u2DFF\u2E80-\u2FFF\u3004-\u3007\u3021-\u302F\u3031-\uD7FF\uF900-\uFD3D\uFD40-\uFDCF\uFDF0-\uFE1F\uFE30-\uFE44\uFE47-\uFFFD]|[\uD800-\uD83E\uD840-\uD87E\uD880-\uD8BE\uD8C0-\uD8FE\uD900-\uD93E\uD940-\uD97E\uD980-\uD9BE\uD9C0-\uD9FE\uDA00-\uDA3E\uDA40-\uDA7E\uDA80-\uDABE\uDAC0-\uDAFE\uDB00-\uDB3E\uDB40-\uDB7E][\uDC00-\uDFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F][\uDC00-\uDFFD])([0-9A-Z_a-z\xA8\xAA\xAD\xAF\xB2-\xB5\xB7-\xBA\xBC-\xBE\xC0-\xD6\xD8-\xF6\xF8-\u167F\u1681-\u180D\u180F-\u1FFF\u200B-\u200D\u202A-\u202E\u203F\u2040\u2054\u2060-\u218F\u2460-\u24FF\u2776-\u2793\u2C00-\u2DFF\u2E80-\u2FFF\u3004-\u3007\u3021-\u302F\u3031-\uD7FF\uF900-\uFD3D\uFD40-\uFDCF\uFDF0-\uFE44\uFE47-\uFFFD]|[\uD800-\uD83E\uD840-\uD87E\uD880-\uD8BE\uD8C0-\uD8FE\uD900-\uD93E\uD940-\uD97E\uD980-\uD9BE\uD9C0-\uD9FE\uDA00-\uDA3E\uDA40-\uDA7E\uDA80-\uDABE\uDAC0-\uDAFE\uDB00-\uDB3E\uDB40-\uDB7E][\uDC00-\uDFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F][\uDC00-\uDFFD])*)(?=(?:\s*=)))/,/^(?:(([@-Z_a-z\xA8\xAA\xAD\xAF\xB2-\xB5\xB7-\xBA\xBC-\xBE\xC0-\xD6\xD8-\xF6\xF8-\u02FF\u0370-\u167F\u1681-\u180D\u180F-\u1DBF\u1E00-\u1FFF\u200B-\u200D\u202A-\u202E\u203F\u2040\u2054\u2060-\u20CF\u2100-\u218F\u2460-\u24FF\u2776-\u2793\u2C00-\u2DFF\u2E80-\u2FFF\u3004-\u3007\u3021-\u302F\u3031-\uD7FF\uF900-\uFD3D\uFD40-\uFDCF\uFDF0-\uFE1F\uFE30-\uFE44\uFE47-\uFFFD]|[\uD800-\uD83E\uD840-\uD87E\uD880-\uD8BE\uD8C0-\uD8FE\uD900-\uD93E\uD940-\uD97E\uD980-\uD9BE\uD9C0-\uD9FE\uDA00-\uDA3E\uDA40-\uDA7E\uDA80-\uDABE\uDAC0-\uDAFE\uDB00-\uDB3E\uDB40-\uDB7E][\uDC00-\uDFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F][\uDC00-\uDFFD])([0-9A-Z_a-z\xA8\xAA\xAD\xAF\xB2-\xB5\xB7-\xBA\xBC-\xBE\xC0-\xD6\xD8-\xF6\xF8-\u167F\u1681-\u180D\u180F-\u1FFF\u200B-\u200D\u202A-\u202E\u203F\u2040\u2054\u2060-\u218F\u2460-\u24FF\u2776-\u2793\u2C00-\u2DFF\u2E80-\u2FFF\u3004-\u3007\u3021-\u302F\u3031-\uD7FF\uF900-\uFD3D\uFD40-\uFDCF\uFDF0-\uFE44\uFE47-\uFFFD]|[\uD800-\uD83E\uD840-\uD87E\uD880-\uD8BE\uD8C0-\uD8FE\uD900-\uD93E\uD940-\uD97E\uD980-\uD9BE\uD9C0-\uD9FE\uDA00-\uDA3E\uDA40-\uDA7E\uDA80-\uDABE\uDAC0-\uDAFE\uDB00-\uDB3E\uDB40-\uDB7E][\uDC00-\uDFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F][\uDC00-\uDFFD])*))/,/^(?:"(\\["]|[^"])*")/,/^(?:'(\\[']|[^'])*')/,/^(?:-?[0-9]+(?:\.[0-9]+)?)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}